{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#cloudflared-remotefalcon","title":"cloudflared-remotefalcon","text":"<p>Remote Falcon is an awesome project and I thought I would give back by creating a simplified way to run Remote Falcon for those who would like to self host beyond just these ways.</p> <p>cloudflared-remotefalcon helps you self host Remote Falcon with guided setup and configuration using Cloudflare Tunnels and your own server capable of running Docker through the use of various helper scripts.</p> <p>Are you ready to get started?</p> <p>Check out the Remote Falcon Docs to learn more about Remote Falcon.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#202506161","title":"2025.06.16.1","text":"<ul> <li> <p>Updated configure-rf .env file version would not display if .env didn't already exist.</p> </li> <li> <p>Added FPP 9 configuration steps here.</p> </li> <li> <p>Updated update_rf_containers again to fix the current_ctx not being found properly.</p> </li> </ul>"},{"location":"release-notes/#20250691","title":"2025.06.9.1","text":"<ul> <li> <p>Updated health_check errors and formatting. Added retry for RF container checks.</p> </li> <li> <p>Updated shared_functions to add MongoDB version during backup.</p> </li> <li> <p>Fixed update_rf_containers not displaying current image tag.</p> </li> </ul>"},{"location":"release-notes/#20250661","title":"2025.06.6.1","text":"<ul> <li> <p>Updated health_check errors and formatting for RF container checks.</p> </li> <li> <p>Updated configure-rf list_file_versions placement in script.</p> </li> <li> <p>Updated update_containers formatting.</p> </li> <li> <p>Updated make_admin to allow selecting by number and updated formatting and coloring.</p> </li> <li> <p>Updated generate_jwt to allow selecting by number and updated formatting and coloring.</p> </li> <li> <p>Added revert script to assist with reverting back to previous compose.yaml, .env, or MongoDB backups. </p> </li> </ul>"},{"location":"release-notes/#20250621","title":"2025.06.2.1","text":"<ul> <li> <p>Fixed some coloring on output in health_check.sh and configure-rf.</p> </li> <li> <p>Moved mongo_backup function to shared_functions.sh.</p> </li> <li> <p>configure-rf.sh now displays existing script versions to help keep track of updates.</p> </li> </ul>"},{"location":"release-notes/#202505311","title":"2025.05.31.1","text":"<ul> <li> <p>configure-rf - Moved shared_functions.sh to source it earlier to ensure coloring takes effect.</p> </li> <li> <p>configure-rf - Moved service running check to only run if env update is accepted</p> </li> <li> <p>minio_init - Fixed parse_env_file \"$ENV_FILE\" to parse_env \"$ENV_FILE\" as this was causing duplicate variables.</p> </li> <li> <p>update_containers - Update image tag if container version is on latest and the compose version is not in a valid version tag format(such as 'latest'). This will allow for rolling back to backed up compose file.</p> </li> </ul>"},{"location":"release-notes/#202505271","title":"2025.05.27.1","text":"<ul> <li> <p>Revamped pretty much everything! The configure-rf, update_containers, and update_rf_containers scripts have been updated to add colorization and simplification. </p> </li> <li> <p>Image checking in the update_rf_containers script has been updated.</p> </li> <li> <p>Updated various things to include MinIO for object storage! This allows you to use the 'Image Hosting' tab in the Control Panel to locally store viewer page images.</p> </li> <li> <p>Added minio_init script to assist in configuring the minio container for pretty much a hands off setup of MinIO.</p> </li> <li> <p>Updated compose.yaml to include minio container.</p> </li> <li> <p>Updated default.conf to add /remote-falcon-images path to point to minio container.</p> </li> <li> <p>Updated update_containers.sh to check for minio container updates.</p> </li> <li> <p>Added various variables to the .env file and moved some things in the compose.yaml to the .env file.</p> </li> <li> <p>Updated health_check script to display MinIO server local LAN link, server status, and bucket object info.</p> </li> <li> <p>Various other changes.</p> </li> </ul>"},{"location":"release-notes/#202505121","title":"2025.05.12.1","text":"<ul> <li> <p>Updated update_containers.sh</p> </li> <li> <p>Removed the prompt to backup and just automatically backup Mongo.</p> </li> <li> <p>Updated sed command in prompt_to_update().</p> </li> <li> <p>Extract Mongo DB name, username, and password from MONGO_URI in the .env file.</p> </li> <li> <p>Removed health_check from update_containers.sh to simplify the script.</p> </li> </ul>"},{"location":"release-notes/#20253301","title":"2025.3.30.1","text":"<ul> <li>Fixed the update_rf_containers script. The build context for a container would incorrectly be updated to the context of the repo of another container.</li> <li>Fixed the wrong repo being displayed on the update prompt.</li> </ul>"},{"location":"release-notes/#2025361","title":"2025.3.6.1","text":"<ul> <li>Updated update_rf_containers script to set the context to the GitHub commit hash in compose.yaml when updating to new image tag:      </li> </ul> compose.yaml<pre><code>control-panel:\n    build:\n      context: https://github.com/Remote-Falcon/remote-falcon-control-panel.git#f12f5fbfa90c6f2358a2843ec340de771a7e88bf\n      args:\n        - OTEL_OPTS=\n    image: control-panel:f12f5fb\n    container_name: control-panel\n</code></pre> <ul> <li> <p>Updated update_rf_containers script to update the VERSION variable to YYYY.MM.DD version format when RF images are built and deployed.</p> </li> <li> <p>Updated compose.yaml to change jwt.user to use new ${USER_JWT_KEY} .env variable.</p> </li> <li> <p>Added USER_JWT_KEY to .env file.</p> </li> <li> <p>Updated configure-rf script to generate random JWT keys without asking for a value.</p> </li> <li> <p>Fixed configure-rf script to allow = in variable.</p> </li> <li> <p>Fixed configure-rf script to display variables that are not assigned. </p> </li> <li> <p>Updated some formatting on the update_containers script.</p> </li> <li> <p>Added MIXPANEL_KEY to compose.yaml and .env.</p> </li> <li> <p>Added MONGO_URI, OTEL_URI, OTEL_OPTS to .env.</p> </li> <li> <p>Added S3_ENDPOINT, S3_ACCESS_KEY, S3_SECRET_KEY to .env and compose.yaml.</p> </li> <li> <p>Updated NGINX default.conf viewer port from 8082 to 8080 due to change in 15ab9d4.</p> </li> <li> <p>Updated compose.yaml viewer section to change port to 8080 and added MONGO_URI and OTEL_URI build args.</p> </li> <li> <p>Updated health_check script viewer endpoint to https://$DOMAIN/remote-falcon-viewer/q/health</p> </li> </ul>"},{"location":"release-notes/#2025141","title":"2025.1.4.1","text":"<ul> <li> <p>Everything with regards to the compose.yaml files and configuration script has been updated. The two compose.yaml scripts for published and non-published ports have been removed to just the single compose.yaml with plugins-api port 8083 published. This is exactly how I have run RF for the 2024 season without any issues. </p> </li> <li> <p>Updated the configure-rf script to run outside of the 'remotefalcon' directory. It will also auto create the 'remotefalcon' directory if it is not found in the current directory.</p> </li> <li> <p>Added two update scripts. These scripts will display a list of changes in newer versions compared to your current container version and ask you to update. The scripts will directly modify your compose.yaml to update the image tag to the new version versus tagging the containers to 'latest'</p> </li> <li> <p>The update_containers.sh script can be run directly with:</p> </li> </ul> <p>Update containers syntax</p> <pre><code>  ./update_containers.sh [all|mongo|minio|nginx|cloudflared] [dry-run|auto-apply|interactive] [health]\n</code></pre> <p>Update specific container</p> <pre><code>  ./update_containers.sh cloudflared auto-apply health\n  \u2699\ufe0f Checking for non-RF container updates...\n  \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n  \ud83d\udd04 Container: cloudflared\n  \ud83d\udd38 Current version: 2025.5.0\n  \ud83d\udd39 Latest version: 2025.5.0\n  \u2705 cloudflared is up-to-date.\n  \ud83d\ude80 Done. Non-RF container update process complete.\n</code></pre> <ul> <li> <p>Added health check script that gets called from the configure-rf.sh script and the update scripts.</p> </li> <li> <p>The health_check.sh script can be run directly with:</p> <p><code>./health_check.sh</code></p> </li> <li> <p>The health check will check/display the following:</p> </li> <li> <p>sudo docker ps -a</p> </li> <li> <p>Remote Falcon endpoints</p> </li> <li> <p>SSL certificate and private key match validation</p> </li> <li> <p>Nginx configuration</p> </li> <li> <p>Any shows configured on Remote Falcon in the format of the show URL.</p> </li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>Adding a bit to the Remote Falcon architecture diagram from here, we have Cloudflared and MinIO.</p> <p>All web traffic goes through Cloudflared directly into NGINX.</p> <p>Then we also have MinIO to provide object storage. The control-panel connects directly to MinIO and MinIO is connected to NGINX to allow for images to be viewable when used on the viewer page.</p>"},{"location":"architecture/#cloudflared-remotefalcon-flowchart","title":"cloudflared-remotefalcon flowchart","text":"<pre><code>---\nconfig:\n  layout: fixed\n---\nflowchart LR\n  %% RF containers\n  control_panel([remote-falcon-control-panel])\n  viewer([remote-falcon-viewer])\n  plugins_api([remote-falcon-plugins-api])\n  external_api([remote-falcon-external-api])\n  ui([remote-falcon-ui])\n\n  %% Non-RF containers\n  nginx([nginx])\n  cloudflared([cloudflared])\n  mongo([MongoDB])\n  minio([MinIO])\n  fpp([\"FPP/xSchedule\"]) \n\n  %% Connections based on depends_on and service usage\n  control_panel --&gt; mongo\n  control_panel --&gt; minio\n  viewer --&gt; mongo\n  plugins_api --&gt; mongo\n  external_api --&gt; mongo\n  external_api --&gt; viewer\n  ui --&gt; control_panel\n  ui --&gt; viewer\n  nginx --&gt; control_panel\n  nginx --&gt; viewer\n  nginx --&gt; plugins_api\n  nginx --&gt; external_api\n  nginx --&gt; ui\n  nginx --&gt; minio\n  cloudflared --&gt; nginx\n  fpp --&gt; plugins_api\n\n  click control_panel href \"containers#control-panel\" \"Control Panel Container\"\n  click viewer href \"containers#viewer\" \"Viewer Container\"\n  click plugins_api href \"containers#plugins-api\" \"Plugins API Container\"\n  click external_api href \"containers#external-api\" \"External API Container\"\n  click ui href \"containers#ui\" \"UI Container\"\n  click nginx href \"containers#nginx\" \"NGINX Container\"\n  click cloudflared href \"containers#cloudflared\" \"Cloudflared Container\"\n  click minio href \"containers#minio\" \"MinIO Container\"\n  click mongo href \"containers#mongo\" \"MongoDB Container\"\n\n</code></pre>"},{"location":"architecture/containers/","title":"Containers","text":"<p>Below is a summary of each container and/or links to also learn more about them.</p>"},{"location":"architecture/containers/#mongo","title":"mongo","text":"<p>MongoDB provides the database that stores show information.</p> <ul> <li>Remote Falcon Developer Docs - MongoDB</li> </ul>"},{"location":"architecture/containers/#external-api","title":"external-api","text":"<ul> <li> <p>The External API allows you to create your own viewer page outside of the Remote Falcon viewer pages. See the API documentation, examples, and here.</p> </li> <li> <p>GitHub - external-api</p> </li> </ul>"},{"location":"architecture/containers/#ui","title":"ui","text":"<ul> <li> <p>See the Remote Falcon Developer Docs - ui for more details.</p> </li> <li> <p>GitHub - ui</p> </li> </ul>"},{"location":"architecture/containers/#plugins-api","title":"plugins-api","text":"<ul> <li> <p>See the Remote Falcon Developer Docs - plugins-api for more details.</p> </li> <li> <p>GitHub - plugins-api</p> </li> </ul>"},{"location":"architecture/containers/#viewer","title":"viewer","text":"<ul> <li> <p>See the Remote Falcon Developer Docs - viewer for more details.</p> </li> <li> <p>GitHub - viewer</p> </li> </ul>"},{"location":"architecture/containers/#control-panel","title":"control-panel","text":"<ul> <li> <p>See the Remote Falcon Developer Docs - control-panel for more details.</p> </li> <li> <p>GitHub - control-panel</p> </li> </ul>"},{"location":"architecture/containers/#minio","title":"minio","text":"<p>MinIO provides object storage that can be used to store viewer page images.</p>"},{"location":"architecture/containers/#nginx","title":"nginx","text":"<p>NGINX is the reverse proxy server that provides access to the Remote Falcon containers.</p>"},{"location":"architecture/containers/#cloudflared","title":"cloudflared","text":"<p>Cloudflared is a client for Cloudflare Tunnel which allows us to route all web traffic through Cloudflare to NGINX. </p>"},{"location":"architecture/files/","title":"Files","text":"<p>Below you will find a summary of each file that is in the <code>remotefalcon</code> directory.</p> <p>The configure-rf script will download these automatically if they do not exist.</p>"},{"location":"architecture/files/#composeyaml","title":"compose.yaml","text":"<p>The compose.yaml defines all the containers and makes heavy use of the .env file.</p> <p>There is typically no need to manually edit this file. </p> <p>Most of the ports in the compose are not 'published' to help isolate the containers from the local network.</p> <p>The exceptions are plugins-api(8083:8083) and MinIO(9000:9000,9001:9001) which allows for direct LAN access to these containers. </p> plugins-apiminio compose.yaml<pre><code>plugins-api:\n    build:\n    context: https://github.com/Remote-Falcon/remote-falcon-plugins-api.git\n    args:\n        - OTEL_OPTS=${OTEL_OPTS}\n    image: plugins-api:latest\n    container_name: plugins-api\n    restart: always\n    ports:\n    - \"8083:8083\"\n</code></pre> compose.yaml<pre><code>minio:\n    image: minio/minio:latest\n    container_name: remote-falcon-images.minio\n    restart: always\n    ports:\n    - '9000:9000'\n    - '9001:9001'\n</code></pre>"},{"location":"architecture/files/#env","title":".env","text":"<p>The .env file specifies all the variables that are used in the compose.yaml.</p> <p>Some of these are updated by the configure-rf script.</p> <p>The .env file can be edited manually with <code>nano remotefalcon/.env</code>.</p> .env variables <code>TUNNEL_TOKEN</code> <p>The configure-rf script guides on setting this. Change to the Cloudfare tunnel token from the overview page of the tunnel.</p> <code>DOMAIN</code> <p>The configure-rf script guides on setting this. Change \"your_domain.com\" to your real domain.</p> <code>VIEWER_JWT_KEY</code> <p>The configure-rf script will generate a random value for both of these when it is run.</p> <code>USER_JWT_KEY</code> <p>The configure-rf script will generate a random value for both of these when it is run.</p> <code>HOSTNAME_PARTS</code> <p>Change this to the number of parts in your hostname. For example, domain.com would be two parts ('domain' and 'com'), and sub.domain.com would be 3 parts ('sub', 'domain', and 'com'). For cloudflare 3 parts will not work unless you purchase Advanced Certificate Manager.</p> <code>AUTO_VALIDATE_EMAIL</code> <p>The configure-rf script guides on setting this. Without a SendGrid key emails will not be sent so this option allows you to auto validate sign ups without sending an email.</p> <code>NGINX_CONF</code> <p>Specifies the path to the NGINX default.conf file. There is no need to modify this.</p> <code>NGINX_CERT</code> <p>The configure-rf script guides on setting this. Specifies the path to the SSL certifcate used by NGINX.</p> <code>NGINX_KEY</code> <p>The configure-rf script guides on setting this. Specifies the path to the SSL private key used by NGINX.</p> <code>HOST_ENV</code> <p>There is no need to change this from 'prod'.</p> <code>VERSION</code> <p>The update_rf_containers script updates this when it is run and one of the RF containers gets updated. This changes the version displayed in the lower left of the Control Panel in the YYYY.MM.DD format.</p> <code>GOOGLE_MAPS_KEY</code> <p>This is used for the Remote Falcon Shows Maps on the Control Panel.</p> <code>PUBLIC_POSTHOG_KEY</code> <p>This is used for analytics. You can create a free account at Create this at PostHog</p> <code>PUBLIC_POSTHOG_HOST</code> <p>This specifies the PostHog host to use from your Posthog settings page.</p> <code>GA_TRACKING_ID</code> <p>Google Analytics Measurement ID/gtag.</p> <code>MIXPANEL_KEY</code> <p>Mixpanel analytics key. </p> <code>CLIENT_HEADER</code> <p>CF-Connecting-IP is used for Cloudflare to get the actual client IP address for viewer statistics. For Non-Cloudflare you may need to change to X-Forwarded-For or X-Real-IP</p> <code>SENDGRID_KEY</code> <p>For sending validation email if you have a SendGrid account.</p> <code>GITHUB_PAT</code> <p>GitHub Personal Access Token. This is not required.</p> <code>SOCIAL_META</code> <p>The configure-rf script gives the option of setting this. Check the Remote Falcon Developer Docs for more details.</p> <code>SEQUENCE_LIMIT</code> <p>This is the sequence limit for the number of sequences that a show can sync with Remote Falcon. The default is 200.</p> <code>MONGO_PATH</code> <p>This specifies the path where the MongoDB container data is stored on your server. The default is: <code>/home/mongo-volume</code>. The configure-rf script does NOT modify this.</p> <code>MONGO_INITDB_ROOT_USERNAME</code> <p>Specifies the root username for MongoDB. The configure-rf script currently does NOT modify this.</p> <code>MONGO_INITDB_ROOT_PASSWORD</code> <p>Specifies the root password for MongoDB. The configure-rf script currently does NOT modify this.</p> <code>MONGO_URI</code> <p>Combines the MongoDB root username and password together into the URI path. There is no need to modify this.</p> <code>MINIO_PATH</code> <p>This specifies the path where the MinIO container data is stored on your server. The default is: <code>/home/minio-volume</code>. The configure-rf script does NOT modify this.</p> <code>MINIO_ROOT_USER</code> <p>Specifies the root user for MinIO. The minio-init script will automatically update the default value to a random value.</p> <code>MINIO_ROOT_PASSWORD</code> <p>Specifies the root password for MinIO. The minio-init script will automatically update the default value to a random value.</p> <code>S3_ENDPOINT</code> <p>Specifies the S3 endpoint URL for the control-panel container to use for Image Hosting.</p> <code>S3_ACCESS_KEY</code> <p>Specifies the S3 access key for MinIO 'remote-falcon-images' bucket. The minio-init script will automatically update the default value to a random value.</p> <code>S3_SECRET_KEY</code> <p>Specifies the S3 seceret key for MinIO 'remote-falcon-images' bucket. The minio-init script will automatically update the default value to a random value.</p> <code>OTEL_URI</code> <p>This is used for OpenTelemry. </p> <code>OTEL_OPTS</code> <p>This is used for OpenTelemry. </p>"},{"location":"architecture/files/#defaultconf","title":"default.conf","text":"<p>The default.conf is used for NGINX and defines its configuration.</p>"},{"location":"extra/","title":"Extra","text":""},{"location":"extra/#update-or-view-the-env-file-manually-outside-of-the-configure-rf-script","title":"Update or view the .env file manually outside of the configure-rf script","text":"<p>The configure-rf script isn't required to view or make updates to the .env file. </p> <p>You can manually edit the file, but the compose stack will have to be brought down manually and the Remote Falcon images rebuilt for some settings to take effect.</p> <ul> <li> <p>To view the .env file:     <pre><code>cat remotefalcon/.env\n</code></pre></p> </li> <li> <p>To manually edit the .env file:     <pre><code>nano remotefalcon/.env\n</code></pre></p> </li> </ul>"},{"location":"extra/#external-api","title":"External API","text":"<p>Follow the steps below to get access to the external API for your self hosted Remote Falcon.</p> <ol> <li> <p>From the Control Panel Dashboard click the gear icon on the top right</p> </li> <li> <p>Click Account</p> </li> <li> <p>Click Request Access to the right of Request API Access</p> <p>Note</p> <p>Ignore the Unexpected Error or API Access Already Requested if you do not have email configured. The API token and secret will still be generated. </p> </li> <li> <p>Copy the command below and paste it to download and run the generate_jwt script:</p> <pre><code>curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/main/generate_jwt.sh; \\\nchmod +x generate_jwt.sh; \\\n./generate_jwt.sh\n</code></pre> <ul> <li> <p>The script will look for a 'mongo' container and list shows that have requested API access in the database.</p> </li> <li> <p>The script will display your JWT that you can use as needed.</p> </li> </ul> </li> </ol>"},{"location":"extra/#testing-external-api-access","title":"Testing External API access","text":"<p>You can test your JWT with curl in Linux directly from your RF server.</p> <ol> <li> <p>Enter your JWT on the shell to set the JWT variable with: </p> <pre><code>JWT=replace_with_your_JWT\n</code></pre> </li> <li> <p>Verify your JWT is set by entering <code>$JWT</code> on the shell</p> </li> <li> <p>Replace yourdomain.com with your RF domain and run the curl command:</p> <pre><code>curl -X 'GET' 'https://yourdomain.com/remote-falcon-external-api/showDetails' -H 'accept: application/json' -H \"Authorization: Bearer $JWT\"\n</code></pre> </li> </ol> <p>If all went to plan you will see output similar to the below if you have a freshly configured account.</p> <pre><code>{\"preferences\":{\"viewerControlEnabled\":false,\"viewerControlMode\":\"JUKEBOX\",\"resetVotes\":false,\"jukeboxDepth\":0,\"locationCheckMethod\":null,\"showLatitude\":0.0,\"showLongitude\":0.0,\"allowedRadius\":1.0,\"jukeboxRequestLimit\":0,\"locationCode\":null,\"hideSequenceCount\":0,\"makeItSnow\":false},\"sequences\":[],\"sequenceGroups\":[],\"requests\":[],\"votes\":[],\"playingNow\":null,\"playingNext\":null,\"playingNextFromSchedule\":null}\n</code></pre> <p>References:</p> <ul> <li> <p>Remote Falcon SwaggerHub</p> </li> <li> <p>Remote Falcon external-api-sample</p> </li> </ul>"},{"location":"extra/#admin-access","title":"Admin access","text":"<ul> <li> <p>This will provde a new Admin section on the left-hand menu on the Control Panel. </p> </li> <li> <p>It will let you search for show subdomains and let you basically view/edit the MongoDB record.</p> </li> <li> <p>The make_admin script will display any shows found and whether they are configured as a USER or ADMIN.</p> </li> <li> <p>Copy the command below and paste it to download and run the make_admin script:   </p> <pre><code>curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/refs/heads/main/make_admin.sh; \\\nchmod +x ./make_admin.sh; \\\n./make_admin.sh\n</code></pre> </li> <li> <p>The script will run and display a list of shows and their roles. </p> </li> <li> <p>Select the number of the show to toggle the role.</p> </li> <li> <p>You can re-run the script to toggle the show from USER or ADMIN:</p> </li> <li> <p>You may have to log out of Remote Falcon and back in again if you receive Unexpected Error when trying to serach for show subdomains.</p> </li> </ul>"},{"location":"main/","title":"Getting Started","text":"<ul> <li> <p>Check the prerequisites in order to run Remote falcon self-hosted.</p> </li> <li> <p>After installation, review the post-install section on how to configure FPP along with some other helpful tips.</p> </li> <li> <p>Be sure to check cloudflared-remotefalcon release notes for any new updates to the scripts or files.</p> </li> <li> <p>The extra section has other additional tips like using the External API or enabling admin access.</p> </li> <li> <p>If you run into any issues head on over to the troubleshooting section which covers some known issues.</p> </li> </ul>"},{"location":"main/post-install/","title":"Post-Install","text":""},{"location":"main/post-install/#initial-sign-up-and-login","title":"Initial sign up and login","text":"<p>Note</p> <p>Ensure auto validate email was set to true to allow sign up on your Remote Falcon instance without email validation.</p> <ol> <li> <p>Go to <code>yourdomain.com</code> and click the Sign Up button</p> </li> <li> <p>Create your account and sign in.</p> </li> <li> <p>Click the gear icon in the top right -&gt; Click Account Settings -&gt; Click Account</p> </li> <li> <p>Click the  button to copy your <code>Show Token</code>.</p> </li> </ol>"},{"location":"main/post-install/#update-the-fpp-plugin-settings","title":"Update the FPP plugin settings","text":"<ol> <li> <p>In FPP go to Content Setup -&gt; Remote Falcon</p> </li> <li> <p>Enter your <code>Show Token</code> from your self-hosted Remote Falcon account settings.</p> </li> <li> <p>Update the Plugins API Path to your domain:</p> <p>Example Plugins API Path</p> Developer Settings Plugins API Path <code>https://yourdomain.com/remote-falcon-plugins-api</code> </li> <li> <p>Reboot FPP after applying the changes.</p> <p>Tip - Plugins API Path LAN access</p> <p>If you have LAN access to your FPP player and Remote Falcon you can directly connect to the plugins-api container to avoid your FPP player from having to reach out to the internet and back:</p> <p><code>http://ip.address.of.remote.falcon:8083/remote-falcon-plugins-api</code></p> Developer Settings Plugins API Path http://localip.address.of.remote.falcon:8083/remote-falcon-plugins-api </li> <li> <p>You can now continue with configuring your viewer page and other settings. Reference the Remote Falcon Docs if needed.</p> </li> </ol>"},{"location":"main/post-install/#fpp-9","title":"FPP 9","text":"<p>FPP 9 has some extra steps due to the addition of Apache CSP.</p> <p>You will have to manually add your site to the trusted list or the plugins page will not load with the custom Plugins API Path.</p> <ol> <li> <p>In FPP go to Help -&gt;  SSH Shell</p> </li> <li> <p>Login. The default user and password is fpp/falcon.</p> </li> <li> <p>Set the <code>DOMAIN</code> variable directly on the FPP shell to <code>https://yourdomain.com</code> OR <code>http://localip.address.of.remote.falcon:8083</code> if you're using LAN access. </p> <p>Type or copy and paste it into the FPP shell.</p> Example, set one of these on the FPP shell<pre><code>DOMAIN=https://yourdomain.com\nDOMAIN=http://localip.address.of.remote.falcon:8083\n</code></pre> </li> <li> <p>Copy and paste the command below to add your site to the trusted list by:</p> <p>Right-clicking the FPP shell window -&gt; Paste from browser -&gt; paste the command -&gt; Click OK -&gt; Enter to run: Copy and past this to update Apache CSP with DOMAIN and to show the configuration<pre><code>sudo /opt/fpp/scripts/ManageApacheContentPolicy.sh add connect-src $DOMAIN;/opt/fpp/scripts/ManageApacheContentPolicy.sh show\n</code></pre></p> Example command output of Apache CSP add and show<pre><code>Domain 'http://localip.address.of.remote.falcon:8083' added under'connect-src'.\nCSP header generated.\nApache configuration reloaded successfully.\n{                                                             \n\"default-src\": [],\n\"img-src\": [],\n\"script-src\": [],\n\"style-src\": [],\n\"connect-src\": [\n    \"https://remotefalcon.com\",\n    \"http://localip.address.of.remote.falcon:8083\"\n],\n\"object-src\": []\n}\n</code></pre> </li> <li> <p>Now you should be able to update the plugin settings normally. If you still have issues try rebooting or power cycling your FPP device.</p> <p>Tip - Command to update both Apache CSP and Plugins API Path</p> <p>You can substitute this command below for steps 3 and 4 above to update both the Apache CSP and the Plugins API Path.</p> Example, set one of these on the FPP shell<pre><code>DOMAIN=https://yourdomain.com\nDOMAIN=http://localip.address.of.remote.falcon:8083\n</code></pre> Command to update both Apache CSP and Plugins API Path<pre><code>echo;echo \"Adding '$DOMAIN' to Apache CSP...\";sudo /opt/fpp/scripts/ManageApacheContentPolicy.sh add connect-src $DOMAIN;echo \"Displaying currently configured domains for Apache CSP:\";/opt/fpp/scripts/ManageApacheContentPolicy.sh show;echo \"Updating Plugins API Path with '$DOMAIN'...\";sed -i 's|^pluginsApiPath = \".*\"|pluginsApiPath = \"'$DOMAIN'/remote-falcon-plugins-api\"|' media/config/plugin.remote-falcon;echo \"Printing Remote Falcon Plugin configuration:\";cat media/config/plugin.remote-falcon\n</code></pre> Example output<pre><code>Adding 'http://localip.address.of.remote.falcon:8083' to Apache CSP...\nDomain 'http://localip.address.of.remote.falcon:8083' added under 'connect-src'.\nCSP header generated.\nApache configuration reloaded successfully.\nDisplaying currently configured domains for Apache CSP:\n{\n\"default-src\": [],\n\"img-src\": [],\n\"script-src\": [],\n\"style-src\": [],\n\"connect-src\": [\n    \"https://remotefalcon.com\",\n    \"http://localip.address.of.remote.falcon:8083\"\n],\n\"object-src\": []\n}\nUpdating Plugins API Path with 'http://localip.address.of.remote.falcon:8083'...\nPrinting Remote Falcon Plugin configuration:\npluginVersion = \"2025.04.05.1\"\nremotePlaylist = \"\"\ninterruptSchedule = \"false\"\nremoteToken = \"\"\nrequestFetchTime = \"3\"\nadditionalWaitTime = \"0\"\nfppStatusCheckTime = \"1\"\npluginsApiPath = \"http://localip.address.of.remote.falcon:8083/remote-falcon-plugins-api\"\nverboseLogging = \"false\"\nremoteFalconListenerEnabled = \"true\"\nremoteFalconListenerRestarting = \"false\"\ninit = \"true\"\n</code></pre> </li> </ol>"},{"location":"main/post-install/#remote-falcon-image-hosting","title":"Remote Falcon Image hosting","text":"<p>If minio-init script ran successfully and configured MinIO then you are able to make use of the Image Hosting page in the Control Panel.</p> <p>If it is not configured succesfully, you will be greeted with a blank white page after attempting to upload an image.</p> <p>Otherwise, uploading images should display a <code>image-name.png uploaded successfully.</code> message and you will see it in the list of images such as below:</p> Preview Image URL Actions <code>https://remote-falcon-images.nyc3.cdn.digitaloceanspaces.com/yourshowname/linkedin.png</code> <code>https://remote-falcon-images.nyc3.cdn.digitaloceanspaces.com/yourshowname/sl3gtwl.png</code> <p>Warning</p> <p>Ignore the <code>https://remote-falcon-images.nyc3.cdn.digitaloceanspaces.com</code> portion as this is an incorrect link.</p> <p>Substite <code>https://your_domain.com/remote-falcon-images</code> instead and you will get a usable link when you add the image path <code>/yourshowname/yourimagename.png</code>.</p> <p>Example image path for an image hosted from MinIO</p> <p><code>https://your_domain.com/remote-falcon-images/yourshowname/sl3gtwl.png</code></p>"},{"location":"main/prerequisites/","title":"Prerequisites","text":"<p>You will need your own domain name and a server capable of running Docker and MongoDB.</p> <p>If you meet the prerequisites you can move on to the installation!</p>"},{"location":"main/prerequisites/#domain-name","title":"Domain Name","text":"<p>I recommended porkbun if you do not already have a domain name.</p>"},{"location":"main/prerequisites/#server-hardware","title":"Server Hardware","text":"<ul> <li> <p>2 CPUs/cores, minimum</p> </li> <li> <p>4 GB RAM, minimum</p> </li> <li> <p>80 GB disk storage, you may be able to get away with less but more is always better.</p> </li> </ul>"},{"location":"main/prerequisites/#server-os","title":"Server OS","text":"<ul> <li> <p>64-bit Debian</p> </li> <li> <p>64-bit Ubuntu</p> </li> <li> <p>Other 64-bit operating systems that can run Docker will require Docker to be manually installed if it is not already.</p> </li> <li> <p>MongoDB requires a 64-bit OS and a CPU that supports AVX instructions.</p> </li> </ul>"},{"location":"main/updating/","title":"Updating","text":""},{"location":"main/updating/#updating-and-building-new-remote-falcon-images","title":"Updating and building new Remote Falcon images","text":"<p>Run the update_rf_containers script:</p> <pre><code>./update_rf_containers.sh\n</code></pre> <ul> <li> <p>The script tags images to the commit from the Remote Falcon GitHub.</p> </li> <li> <p>If any newer changes are found from the current container(s) commit tag they will be displayed along with a prompt to update the container(s).</p> </li> <li> <p>If the tags are current the script will let you know there are no updates.</p> </li> <li> <p>When an update is accepted, a backup of your current compose.yaml is created and place in the <code>remotefalcon-backups</code> directory.</p> </li> <li> <p>This allows for versioning of the RF containers and the ability to roll back the compose.yaml if an update breaks your Remote Falcon server.</p> </li> </ul>"},{"location":"main/updating/#updating-mongo-minio-nginx-and-cloudflared-containers","title":"Updating Mongo, MinIO, NGINX, and Cloudflared containers","text":"<p>Run the update_containers script: </p> <pre><code>./update_containers.sh\n</code></pre> <ul> <li> <p>The script will fetch the latest available releases for the containers.</p> </li> <li> <p>If an update is available a prompt will be displayed to update along with a link to the release notes.</p> </li> <li> <p>When an update is accepted, a backup of your current compose.yaml is created and place in the remotefalcon-backups directory.</p> </li> <li> <p>The script directly checks the versions in the containers themselves so it does not rely on the image tags in the compose.yaml, but it does update the image tag in order to roll back.</p> </li> </ul>"},{"location":"main/updating/#updating-composeyaml-env-and-defaultconf","title":"Updating compose.yaml, .env, and default.conf","text":"<p>Currently there are no automatic updates for these files. Sometimes there are changes or additions that will require an update.</p> <ol> <li> <p>The <code>configure-rf</code> script will print the existing versions on your system when it runs: <pre><code>\ud83d\udcdc Existing file versions:\n\ud83d\udd38 compose.yaml              2025.5.27.1\n\ud83d\udd38 .env                      2025.5.27.1\n\ud83d\udd38 default.conf              2025.5.27.1\n</code></pre> You can check the release notes to see if there any updates or view the files directly on GitHub looking for any <code># VERSION</code> comments towards the top of each script.</p> </li> <li> <p>Remove the files: <pre><code>rm remotefalcon/compose.yaml remotefalcon/default.conf remotefalcon/.env\n</code></pre></p> <p>Warning</p> <p>Ensure you have a backup of your .env variables.</p> </li> <li> <p>Run the <code>configure-rf</code> script to re-download the files and to re-configure your .env variables: <pre><code>./configure-rf.sh\n</code></pre></p> <p>Note</p> <p>To check for updates to the helper scripts check the instructions here</p> </li> </ol>"},{"location":"main/install/","title":"Installation","text":"<p>Assuming that you meet the prerequisites, installation is broken into two steps:</p> <ol> <li> <p>Cloudflare</p> </li> <li> <p>Remote Falcon</p> </li> </ol>"},{"location":"main/install/cloudflare/","title":"Cloudflare","text":"<p>This page covers the Cloudflare domain name, certificate, tunnel, and DNS configuration.</p> <p>Note</p> <p>The tunnel configuration requires a Cloudflare Zero Trust account, which is free, but will require you to enter a payment method(Credit card or PayPal).</p>"},{"location":"main/install/cloudflare/#add-domain-name-to-cloudflare","title":"Add Domain Name to Cloudflare","text":"<p>If not already added, you'll have to add your domain name to Cloudflare</p> <ol> <li> <p>Go to the Cloudflare Dashboard and click Add a Domain</p> </li> <li> <p>Enter your existing domain name or purchase a new one from Cloudflare</p> </li> <li> <p>Click Continue</p> </li> <li> <p>Select the Free plan and click Continue</p> </li> <li> <p>Delete any existing A or CNAME records that are pointing to * or yourdomain.com and click Continue</p> </li> <li> <p>Copy the Cloudflare nameservers and go to your domain name registrar and update the nameservers for your domain to the Cloudflare nameservers.</p> </li> <li> <p>Click Continue on Cloudflare</p> </li> <li> <p>Skip the Quick Start Guide by clicking Finish Later</p> </li> </ol> <p>You will have to wait some time for the new nameservers to take effect. </p> <p>Cloudflare will send you an email when your domain is available. You can continue with the additional setup so it will be ready to go when your domain is available.</p>"},{"location":"main/install/cloudflare/#certificate","title":"Certificate","text":"<ol> <li> <p>Click SSL/TLS on the left side of the Cloudflare Dashboard</p> </li> <li> <p>Enable the options under each 'SSL/TLS' section</p> </li> </ol> SSL/TLS OverviewEdge CertificatesClient CertificatesOrigin Server <ol> <li>Full(Strict)</li> <li>Enable SSL/TLS Recommender </li> </ol> <ol> <li>Enable Always Use HTTPS</li> <li>Enable Opportunistic Encryption</li> <li>Minimum TLS Version Select TLS 1.3</li> <li>Enable TLS 1.3</li> <li>Enable Automatic HTTPS Rewrites</li> </ol> <p>The client certificate is not required for this configuration</p> <p>Create an origin certificate and copy down the certificate and private key</p> <p>These will be used later in the Remote Falcon configuration script</p> <p>Create the certificate such as:</p> <p>*.yourdomain.com, yourdomain.com</p> <p>Warning</p> <p>The free Cloudflare plan does not let you create wildcard certificates for sub-sub-domains  (ex: *.sub.yourdomain.com) unless you purchase Advanced Certificate Manager.</p>"},{"location":"main/install/cloudflare/#cloudflare-tunnel","title":"Cloudflare Tunnel","text":"<p>Go back to the main Cloudflare Dashboard page if not there already.</p> <ol> <li>Click Zero Trust</li> <li>Click Networks</li> <li>Click Tunnels under Networks</li> <li>Create a tunnel</li> <li>Select Cloudflared and click Next</li> <li>Pick any name you would like for your tunnel. Example: rf-yourdomain</li> <li>Save tunnel</li> <li>Select Docker under choose your environment</li> <li>Copy the whole 'docker run cloudflare' command and paste it into a notepad</li> <li>Click Next</li> </ol> <p>Note</p> <p>Ensure you have copied the whole token. We will need it later in the configuration script.</p>"},{"location":"main/install/cloudflare/#configure-both-public-hostnames","title":"Configure both public hostnames","text":"Public Hostnames <p>Tip</p> <p>The Service URL must be set to the NGINX container_name in the compose.yaml which is 'nginx' by default.</p> First public hostname with BLANK subdomain <p>Warning</p> <p>You may receive an error if you already have DNS records. You will need to delete any existing A or CNAME records pointing to * or yourdomain.com</p> <ul> <li> <p>Subdomain: <code>leave it blank</code></p> </li> <li> <p>Domain: <code>yourdomain.com</code></p> </li> <li> <p>Service Type: HTTPS</p> </li> <li> <p>Service URL: <code>nginx</code></p> </li> </ul> <p>Click Additional application settings -&gt; TLS</p> TLS <ul> <li> <p>Origin Server name: <code>*.yourdomain.com</code></p> </li> <li> <p>HTTP2 connection: On</p> </li> </ul> <p>Click Complete setup / Save tunnel</p> <p></p> <ol> <li> <p>Click the newly created tunnel and click Edit.</p> </li> <li> <p>Click Public Hostnames</p> </li> <li> <p>Click + Add a public hostname</p> </li> </ol> Second public hostname with * WILDCARD subdomin <p>Note</p> <p>Ignore the warning about 'This domain contains a wildcard.\" We will manually add the wildcard entry under the DNS settings later.</p> <ul> <li> <p>Subdomain: <code>*</code></p> </li> <li> <p>Domain: <code>yourdomain.com</code></p> </li> <li> <p>Service Type: HTTPS</p> </li> <li> <p>Service URL: <code>nginx</code></p> </li> </ul> <p>Click Additional application settings -&gt; TLS</p> TLS <ul> <li> <p>Origin Server name: <code>.yourdomain.com</code></p> </li> <li> <p>HTTP2 connection: On</p> </li> </ul> <p>Click Save</p> <p></p>"},{"location":"main/install/cloudflare/#catch-all-rule","title":"Catch-all rule","text":"<ol> <li> <p>Click Edit to the right of the catch-all rule.</p> </li> <li> <p>Type or paste <code>https://nginx</code> and click Save.</p> </li> </ol> <p></p>"},{"location":"main/install/cloudflare/#dns","title":"DNS","text":"<p>With the Cloudflare tunnel configuration completed. Go back to the main Cloudflare Dashboard.</p> <ol> <li> <p>Click yourdomain.com</p> </li> <li> <p>Select DNS -&gt; Records</p> </li> </ol> <p>You should see a CNAME record that was created automatically for the tunnel.</p> <p>Example tunnel DNS record</p> Type Name Content CNAME <code>yourdomain.com</code> <code>248a0b11-e62a-4b0e-8e30-123456789101112.cfargotunnel.com</code> <p>Click + Add Record and add it as below, substiting yourdomain.com for your domain name.</p> Add record Type Name Target CNAME <code>*</code> <code>yourdomain.com</code> <p>Click Save</p> <p>Now you should have two DNS records.</p> <p>Both should be proxied.</p> <p>Example DNS records</p> Type Name Content CNAME <code>*</code> <code>yourdomain.com</code> CNAME <code>yourdomain.com</code> <code>248a0b11-e62a-4b0e-8e30-123456789101112.cfargotunnel.com</code> <p></p> <p>Scroll down and you should see the Cloudflare Nameservers.</p> <p>Ensure that you are using these name servers with your domain name registrar/provider.</p> <p>Next is Remote Falcon installation.</p>"},{"location":"main/install/remotefalcon/","title":"Remote Falcon","text":"<p>The configure-rf script will help configure the .env variables that are required to run Remote Falcon. It will also kick off other helper scripts to update container tags and perform some health checks after all containers are up and running.</p>"},{"location":"main/install/remotefalcon/#download-and-run-configure-rf-script","title":"Download and run configure-rf script","text":"<ol> <li> <p>Download the script to your desired directory. Your current directory can be verified with <code>pwd</code> command.</p> </li> <li> <p>Run the command below. The command will download the configure-rf script, make it executable, and run it automatically.</p> <pre><code>curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/main/configure-rf.sh; \\\nchmod +x configure-rf.sh; \\\n./configure-rf.sh\n</code></pre> </li> </ol> <p>Note</p> <p>The configure-rf script will automatically download additional helper scripts and create 'remotefalcon' and 'remotefalcon-backups' directories.</p> <p>Make sure you have the following information available to copy and paste as the configuration script will ask for these:</p> <ul> <li> <p>Cloudflare Tunnel token</p> </li> <li> <p>Cloudflare origin server certificate</p> </li> <li> <p>Cloudflare origin server private key</p> </li> </ul> <p>If everything went to plan with the configuration you should see your containers all up similar to below:</p> <pre><code>CONTAINER ID   IMAGE                                      COMMAND                  CREATED          STATUS          PORTS                                                             NAMES\n9a6a8428cace   control-panel:e6c110c                      \"/bin/sh -c 'exec ja\u2026\"   21 seconds ago   Up 20 seconds   8080/tcp                                                          control-panel\n9279b7669e75   minio/minio:RELEASE.2025-05-24T17-08-30Z   \"/usr/bin/docker-ent\u2026\"   38 seconds ago   Up 37 seconds   0.0.0.0:9000-9001-&gt;9000-9001/tcp, [::]:9000-9001-&gt;9000-9001/tcp   remote-falcon-images.minio\n5549dad80125   ui:cb19864                                 \"docker-entrypoint.s\u2026\"   49 seconds ago   Up 47 seconds   3000/tcp                                                          ui\n73cfd4d5f7da   external-api:f7e09fe                       \"/bin/sh -c 'exec ja\u2026\"   50 seconds ago   Up 48 seconds   8080/tcp                                                          external-api\nf68aacb72ec3   viewer:b7cfb2d                             \"/app/application -D\u2026\"   50 seconds ago   Up 48 seconds   8080/tcp                                                          viewer\nd1b5f2540758   plugins-api:cc1593a                        \"/bin/sh -c 'exec ja\u2026\"   50 seconds ago   Up 48 seconds   8080/tcp, 0.0.0.0:8083-&gt;8083/tcp, [::]:8083-&gt;8083/tcp             plugins-api\ndd12ab4fa10c   mongo:8.0.9                                \"docker-entrypoint.s\u2026\"   51 seconds ago   Up 48 seconds   27017/tcp                                                         mongo\naa85a908e37a   nginx:latest                               \"/docker-entrypoint.\u2026\"   51 seconds ago   Up 47 seconds   80/tcp                                                            nginx\ndb51c56fbbfd   cloudflare/cloudflared:latest              \"cloudflared --no-au\u2026\"   51 seconds ago   Up 48 seconds                                                                     cloudflared\n</code></pre> <p>If all looks OK you can then move on to post install or if you see errors check the troubleshooting section.</p> <p>The configuration script can be re-run with <code>./configure-rf.sh</code> to help make any changes if needed.</p> <p>You can also directly run the health_check, update_rf_containers, or update_containers helper scripts directly as well.</p>"},{"location":"scripts/","title":"Scripts","text":""},{"location":"scripts/#script-updates","title":"Script Updates","text":"<p>Currently there is no auto-update for the configure-rf or helper scripts so you may want to check for updates periodically.</p> <ol> <li>The <code>configure-rf</code> script will print the existing versions on your system when it runs: <pre><code>\ud83d\udcdc Existing script versions:\n\ud83d\udd38 configure-rf.sh           2025.6.2.1\n\ud83d\udd38 health_check.sh           2025.5.26.1\n\ud83d\udd38 minio_init.sh             2025.5.31.1\n\ud83d\udd38 update_containers.sh      2025.5.31.1\n\ud83d\udd38 update_rf_containers.sh   2025.5.27.1\n</code></pre></li> </ol> <p>You can check the release notes to see if there any updates or view the <code>.sh</code> files directly on GitHub looking for any <code># VERSION</code> comments towards the top of each script.</p> <ol> <li> <p>Remove the scripts: <pre><code>rm configure-rf.sh health_check.sh minio_init.sh update_containers.sh update_rf_containers.sh\n</code></pre></p> </li> <li> <p>The command below will re-download the configure-rf script and run it which will then re-download the helper scripts: <pre><code>curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/main/configure-rf.sh; \\\nchmod +x configure-rf.sh; \\\n./configure-rf.sh\n</code></pre></p> <p>Note</p> <p>To check for updates to compose.yaml, .env, and default.conf check the instructions here</p> </li> </ol>"},{"location":"scripts/#scripts-details","title":"Scripts Details","text":"<p>Click through the tabs below to view detailed information for each script.</p> Configure RFUpdate RF ContainersUpdate ContainersHealth CheckGenerate JWTMake AdminRevertMinIO InitShared Functions <ul> <li> <p>This script is used for the initial setup and configuration of cloudflared-remotefalcon.</p> </li> <li> <p>It guides you on setting the required and some optional .env variables.</p> </li> <li> <p>It can be re-run to view or update the variables or to run the container update or health check scripts.</p> </li> <li> <p>Automatically downloads other helper scripts if they are missing.</p> </li> <li> <p>Automatically creates the <code>remotefalcon</code> and <code>remotefalcon-backups</code> directories.</p> </li> <li> <p>Automatically downloads the compose.yaml, .env, and default.conf files if they are missing.</p> </li> </ul> Run configure-rf.sh<pre><code>./configure-rf.sh\n</code></pre> <p></p> <ul> <li> <p>This script will update the Remote Falcon containers to the latest available commit on the Remote Falcon Github.</p> </li> <li> <p>The compose.yaml build context hash is updated to the latest commit for the container.</p> </li> <li> <p>The image tag for the container is updated in the compose.yaml to the short-hash: <pre><code>  plugins-api:\n    build:\n      context: https://github.com/Remote-Falcon/remote-falcon-plugins-api.git#cc1593aab27dc195a4c55b5b1410ddc06e96a60c\n      args:\n        - OTEL_OPTS=${OTEL_OPTS}\n    image: plugins-api:cc1593a\n    container_name: plugins-api\n</code></pre></p> </li> <li> <p>A backup of the compose.yaml is created when any of the containers are updated.</p> </li> <li> <p>The script accepts two arguments:</p> <ol> <li> <p><code>[dry-run|auto-apply|interactive]</code></p> <ul> <li> <p><code>dry-run</code>: Displays if any updates are available or if up to date.</p> </li> <li> <p><code>auto-apply</code>: Automatically update all RF containers if any updates are found.</p> </li> <li> <p><code>interactive/no argument</code>: Display if update is available and prompt for confirmation before updating each container.</p> </li> </ul> </li> <li> <p><code>[health]</code></p> <ul> <li>Add <code>health</code> after the first argument to automatically run the health_check script.</li> </ul> </li> </ol> </li> </ul> update_rf_containers script syntax examples<pre><code>./update_rf_containers.sh [dry-run|auto-apply|interactive] [health]\n./update_rf_containers.sh\n./update_rf_containers.sh dry-run health\n./update_rf_containers.sh auto-apply\n</code></pre> <p></p> <ul> <li> <p>This script will check and update the non-Remote Falcon containers to their latest available release.</p> </li> <li> <p>The compose.yaml container image tag is updated to the latest release.</p> </li> <li> <p>A backup of the compose.yaml is created when any of the containers are updated.</p> </li> <li> <p>The script accepts three arguments:</p> <ol> <li> <p><code>[all|mongo|minio|nginx|cloudflared]</code></p> <ul> <li><code>container_name</code>: You can specify an individual container or all. If left blank with no other arguments it will check all containers in interactive mode.</li> </ul> </li> <li> <p><code>[dry-run|auto-apply|interactive]</code>: </p> <ul> <li> <p><code>dry-run</code>: Displays if any updates are available or if up to date.</p> </li> <li> <p><code>auto-apply</code>: Automatically update all RF containers if any updates are found.</p> </li> <li> <p><code>interactive/no argument</code>: Display if update is available and prompt for confirmation before updating each container.</p> </li> </ul> </li> <li> <p><code>[health]</code></p> <ul> <li>Add <code>health</code> after the first two arguments to automatically run the health_check script.</li> </ul> </li> </ol> </li> </ul> <p>update_containers script syntax examples<pre><code>./update_containers.sh [all|mongo|minio|nginx|cloudflared] [dry-run|auto-apply|interactive] [health]\n./update_containers.sh\n./update_containers.sh all dry-run health\n./update_containers.sh all auto-apply\n</code></pre> </p> <ul> <li> <p>This script will perform a 'health check' of various things and displays any issues that are found.</p> </li> <li> <p>Checks if containers are running.</p> </li> <li> <p>Checks Remote Falcon endpoints.</p> </li> <li> <p>Checks if the domain is not the default.</p> </li> <li> <p>Checks if the .env file exists.</p> </li> <li> <p>Checks if the Cloudflare Origin certificate and key exist and if they match.</p> </li> <li> <p>Checks NGINX configuration and tests it.</p> </li> <li> <p>Checks various MinIO configuration details for Image Hosting.</p> </li> <li> <p>Checks Mongo to search for any shows that are configured and provides their URL.</p> </li> </ul> Run health_check.sh<pre><code>./health_check.sh\n</code></pre> <p></p> <ul> <li> <p>This is to be able to make use of the External API.</p> </li> <li> <p>Assists with getting your API access token and secret key from your Remote Falcon show in the MongoDB database without having Sendgrid configured for email. </p> </li> <li> <p>Then the script generates a JWT for you to use.</p> </li> </ul> Download generate_jwt.sh<pre><code>  curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/refs/heads/main/generate_jwt.sh; \\\n  chmod +x generate_jwt.sh\n</code></pre> Run generate_jwt.sh<pre><code>./generate_jwt.sh\n</code></pre> <p></p> <ul> <li> <p>This script will display shows that have admin access and allow you to toggle admin access when the show subdomain is passed as an argument.</p> </li> <li> <p>Run the script with no arguments to display currently configured showRole(USER/ADMIN).</p> </li> <li> <p>This basically lets you see and edit MongoDB information from within Remote Falcon.</p> </li> </ul> Download make_admin.sh<pre><code>  curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/refs/heads/main/make_admin.sh; \\\n  chmod +x make_admin.sh\n</code></pre> Run make_admin.sh<pre><code>./make_admin.sh\n</code></pre> <p></p> <ul> <li> <p>This script will allow you to revert to a previous backup of the .env, compose.yaml, or MongoDB.</p> </li> <li> <p>The script looks for backups in the 'remotefalcon-backups' directory.</p> </li> </ul> Download revert.sh<pre><code>  curl -O https://raw.githubusercontent.com/Ne0n09/cloudflared-remotefalcon/refs/heads/main/revert.sh; \\\n  chmod +x revert.sh\n</code></pre> Run revert.sh<pre><code>./revert.sh\n</code></pre> <p></p> <ul> <li> <p>This script will configure MinIO. Minio is a lightweight object storage server.</p> </li> <li> <p>The script is called when 'configure-rf.sh' is run and if certain default values are found in the .env file for a hands-off setup and configuration.</p> </li> <li> <p>The minio container is configured for local direct access to the control-panel container.</p> </li> <li> <p>This lets you use the Image Hosting tab in the Control Panel which allows you to self host your viewer page images.</p> </li> <li> <p>The script can be run again manually with no ill-effects to ensure MinIO is configured properly.</p> </li> <li> <p>The script is automatically downloaded by configure-rf.</p> </li> </ul> <p></p> <ul> <li>This is a helper script for functions and variables that are re-used across the other scripts. </li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#stop-and-start-the-compose-stack","title":"Stop and start the compose stack","text":"<p>If you're having issues sometimes the simplest option is to restart all the containers.</p> <p>The first command will shut down all the containers and the second command will bring them back up.</p> <ol> <li>Bring the compose stack down:   <pre><code>sudo docker compose -f remotefalcon/compose.yaml down\n</code></pre></li> <li>Bring the compose stack back up:   <pre><code>sudo docker compose -f remotefalcon/compose.yaml up -d\n</code></pre></li> <li>Run the health_check script to help check for errors:   <pre><code>./health_check.sh\n</code></pre></li> </ol>"},{"location":"troubleshooting/#unexpected-error","title":"Unexpected Error","text":"<ul> <li> <p>Control Panel: Ensure your web browser is pointing you to <code>https://yourdomain.com</code> and NOT <code>www</code>: <code>https://www.yourdomain.com</code></p> </li> <li> <p>Viewer page: Make sure you're browsing to your show page sub-domain. You can find this by clicking the gear icon on the top right of the Remote Falcon control panel. It will show <code>https://yourshowname.remotefalcon.com</code> So for your show on your self hosted RF you would go to <code>https://yourshowname.yourdomain.com</code></p> </li> </ul>"},{"location":"troubleshooting/#err_quic_protocol_error-in-browser","title":"err_quic_protocol_error in browser","text":"<p>Try to restart the cloudflared container:</p> <pre><code>sudo docker restart cloudflared\n</code></pre> <p>Otherwise, it could be something going on with Cloudflare.</p>"},{"location":"troubleshooting/#control-panel-dashboard-viewer-statistics-not-updating","title":"Control Panel Dashboard Viewer Statistics not updating","text":"<p>The Control Panel Dashboard will not count the last IP that was used to login to the Control Panel in the viewer statistics when viewing your show page. </p> <p>If you want to test if viewer statistics are working you can disconnect your phone from Wi-Fi and then check from a desktop/laptop that's logged into the Control Panel.</p>"},{"location":"troubleshooting/#mongo-container-restarting","title":"Mongo Container Restarting","text":"<p>If your Mongo container is constantly restarting when checking <code>sudo docker ps</code> then check the logs with <code>sudo docker logs mongo</code></p> <p>If you see a message similar to the below you will need to downgrade the Mongo image to a version prior to 5.0 if your CPU does not support AVX.</p> <p><pre><code>WARNING: MongoDB 5.0+ requires a CPU with AVX support, and your current system does not appear to have that!\nsee https://jira.mongodb.org/browse/SERVER-54407\nsee also https://www.mongodb.com/community/forums/t/mongodb-5-0-cpu-intel-g4650-compatibility/116610/2\nsee also https://github.com/docker-library/mongo/issues/485#issuecomment-891991814\n</code></pre> If you are running a VM in a system such as Proxmox you can try changing the CPU type to <code>host</code>. </p> <p>To downgrade you can check the latest version of 4 here Mongo 4.x tags</p> <ol> <li> <p>Update the image tag in your compose.yaml   <pre><code>nano remotefalcon/compose.yaml\n</code></pre></p> </li> <li> <p>Modify the Mongo image line:   compose.yaml<pre><code>  mongo:\n    image: mongo:latest\n</code></pre></p> </li> <li> <p>Add the specific 4.x version tag that you would like to use from Mongo 4.x tags compose.yaml<pre><code>  mongo:\n    image: mongo:4.0.28\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#show-page-is-always-redirected-to-the-control-panel","title":"Show page is always redirected to the Control Panel","text":"<ul> <li> <p>When attempting to browse to <code>https://yourshowname.yourdomain.com</code> it always redirects to the Remote Falcon Control Panel. </p> </li> <li> <p>This is caused by <code>HOSTNAME_PARTS</code> being set to 3 when everything else(Tunnel public hostnames/DNS) is configured for 2 parts.  </p> </li> <li> <p>To correct this issue, ensure you set <code>HOSTNAME_PARTS</code> to 2 in the .env file and make sure to update your origin certificates using the configure-rf script so the certificate file names are properly updated for the 2-part domain. </p> </li> </ul>"},{"location":"troubleshooting/#viewer-page-now-playingup-next-not-updating-as-expected","title":"Viewer page Now playing/Up next not updating as expected","text":"<ul> <li> <p>You will observe intermittent and random times where the Now playing/Up next do not update and requests also do not play. </p> </li> <li> <p>After waiting 15 minutes or so things will start working as expected again.</p> </li> </ul> <p>You can check the FPP logs by going to Content Setup -&gt; File Manager -&gt; Logs</p> <p>Check <code>remote-falcon-listener.log</code> and look for any gaps in the logs where you would expect sequences to be updated.</p> <p>Example - Note the gap where there are no updates from 7:11:45 PM to 7:29:53 PM</p> <pre><code>2024-10-26 07:11:45 PM: /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php : [] Updated current playing sequence to Michael Jackson - Thriller\n2024-10-26 07:11:45 PM: /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php : [] Updated next scheduled sequence to The Hit Crew -The Addams Family\n2024-10-26 07:29:53 PM: /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php : [] Updated current playing sequence to Fall Out Boy - My Songs Know What You Did In The Dark (Light Em Up)\n2024-10-26 07:29:54 PM: /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php : [] Updated next scheduled sequence to Geoff Castellucci - Monster Mash\n</code></pre> <p>Check <code>/var/log/syslog</code> for around the same time frame of any gaps noticed in the <code>remote-falcon-listener.log</code>.</p> <p>If you see errors such as the below at the end of the gap timeframe(7:29 PM) then there is some type of connectivity issue between the plugins-api and FPP.</p> <p>Example - /var/log/syslog</p> <pre><code>Oct 26 19:29:52 FPP fppd_boot_post[2128]: PHP Warning:  file_get_contents(): SSL: Handshake timed out in /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php on line 376\nOct 26 19:29:52 FPP fppd_boot_post[2128]: PHP Warning:  file_get_contents(): Failed to enable crypto in /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php on line 376\nOct 26 19:29:52 FPP fppd_boot_post[2128]: PHP Warning:  file_get_contents(https://yourdomain.com/remote-falcon-plugins-api/nextPlaylistInQueue?updateQueue=true): failed to open stream: operation failed in /home/fpp/media/plugins/remote-falcon/remote_falcon_listener.php on line 376\n</code></pre> <p>To resolve, we can publish the plugins-api port and configure the FPP plugin to connect locally to plugins-api to avoid FPP from having to go out to the internet to reach the plugins-api:</p> <ol> <li> <p>Modify the <code>compose.yaml</code> and update the plugins-api container to publish port 8083(if it is not already published):</p> compose.yaml<pre><code>  plugins-api:\n    build:\n      context: https://github.com/Remote-Falcon/remote-falcon-plugins-api.git\n      args:\n        - OTEL_OPTS=\n    image: plugins-api\n    container_name: plugins-api\n    restart: always\n    ports:\n      - \"8083:8083\"\n</code></pre> </li> <li> <p>Restart the containers with these steps.</p> </li> <li> <p><code>sudo docker ps</code> will show the plugins-api is now published on port 8083:  <pre><code>ONTAINER ID   IMAGE                              COMMAND                  CREATED       STATUS       PORTS                                                 NAMES\nc3dc4de3a19b   plugins-api:fe7c932                \"/bin/sh -c 'exec ja\u2026\"   5 hours ago   Up 5 hours   8080/tcp, 0.0.0.0:8083-&gt;8083/tcp, :::8083-&gt;8083/tcp   plugins-api\n</code></pre></p> </li> <li> <p>In the FPP plugin settings update the Plugins API path to the IP address of your local self hosted RF instance:</p> Developer Settings Plugins API Path http://localip.address.of.remote.falcon:8083/remote-falcon-plugins-api </li> <li> <p>Reboot FPP.</p> </li> </ol>"},{"location":"troubleshooting/#troubleshooting-commands","title":"Troubleshooting Commands","text":""},{"location":"troubleshooting/#nginx","title":"NGINX","text":"<ul> <li> <p>Test the NGINX configuration file:    <pre><code>sudo docker exec nginx nginx -t\n</code></pre></p> </li> <li> <p>Show the NGINX configuration file that is being used:   <pre><code>sudo docker exec nginx nginx -T\n</code></pre></p> </li> <li> <p>Display logs from the NGINX container (Or any other container by changing the 'nginx' name at the end):   <pre><code>sudo docker logs nginx\n</code></pre></p> </li> </ul>"},{"location":"troubleshooting/#cloudflared","title":"Cloudflared","text":"<p>Display the status of the Cloudflare tunnel in the Cloudflared container. You will have to open the login link and login to Cloudflare before running the list command.</p> <pre><code>sudo docker exec cloudflared cloudflared tunnel login\nsudo docker exec cloudflared cloudflared tunnel list\n</code></pre>"},{"location":"troubleshooting/#mongo","title":"Mongo","text":"<p>The MongoDB container can be accessed directly using <code>docker exec</code> and <code>mongosh</code> commands to review the database.</p> <ul> <li> <p>Access mongo container CLI, mongo shell, and remote-falcon database to run mongo shell commands:     <pre><code>sudo docker exec -it mongo bash\n</code></pre></p> <pre><code>mongosh \"mongodb://root:root@localhost:27017\" \n</code></pre> <pre><code>use remote-falcon\n</code></pre> </li> <li> <p>To dump all details from every show:      <pre><code>db.show.find()\n</code></pre></p> </li> <li> <p>To delete shows:   <pre><code>db.show.deleteOne( { showName: 'Test3' } )\n</code></pre></p> </li> </ul> <p>Alternatively, here's some one-liner commands that automatically login and run the commands.</p> <ul> <li> <p>To dump all details from every show:   <pre><code>sudo docker exec -i mongo bash -c 'mongosh \"mongodb://root:root@localhost:27017\" --eval \"db = db.getSiblingDB(\\\"remote-falcon\\\"); db.show.find()\"'\n</code></pre></p> </li> <li> <p>To display a list of all show subDomains:   <pre><code>sudo docker exec -it mongo bash -c \"mongosh --quiet 'mongodb://root:root@localhost:27017' --eval 'db = db.getSiblingDB(\\\"remote-falcon\\\"); const subdomains = db.show.find({}, { showSubdomain: 1, _id: 0 }).toArray();subdomains.forEach(doc =&gt; {if (doc.showSubdomain) {print(doc.showSubdomain);}});'\"\n</code></pre></p> </li> </ul>"}]}